package fr.hoenheimsports.model.builder;

import fr.hoenheimsports.model.Coach;
import fr.hoenheimsports.model.PhoneNumber;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class CoachBuilderTest {
    @Test
    public void testCoachBuilder() {
        CoachBuilder coachBuilder = new CoachBuilder();
        UUID expectedId = UUID.randomUUID();
        String expectedName = "John Doe";
        String expectedPhoneNumber = "1234567890";

        Coach coach = coachBuilder
                .withId(expectedId)
                .withName(expectedName)
                .withPhoneNumber(phoneNumberBuilder -> phoneNumberBuilder.withPhoneNumber(expectedPhoneNumber))
                .build();

        assertEquals(expectedId, coach.id());
        assertEquals(expectedName, coach.name());
        assertNotNull(coach.phoneNumber());
        assertEquals(expectedPhoneNumber, coach.phoneNumber().phoneNumber());
    }

    @Test
    public void testCoachBuilderWithAutoGeneratedId() {
        CoachBuilder coachBuilder = new CoachBuilder();
        String expectedName = "John Doe";
        String expectedPhoneNumber = "1234567890";

        Coach coach = coachBuilder
                .withName(expectedName)
                .withPhoneNumber(phoneNumberBuilder -> phoneNumberBuilder.withPhoneNumber(expectedPhoneNumber))
                .build();

        assertNotNull(coach.id());
        assertEquals(expectedName, coach.name());
        assertNotNull(coach.phoneNumber());
        assertEquals(expectedPhoneNumber, coach.phoneNumber().phoneNumber());
    }

    @Test
    public void testCoachBuilderWithPhoneNumberObject() {
        CoachBuilder coachBuilder = new CoachBuilder();
        UUID expectedId = UUID.randomUUID();
        String expectedName = "John Doe";
        PhoneNumber expectedPhoneNumber = new PhoneNumber("1234567890");

        Coach coach = coachBuilder
                .withId(expectedId)
                .withName(expectedName)
                .withPhoneNumber(expectedPhoneNumber)
                .build();

        assertEquals(expectedId, coach.id());
        assertEquals(expectedName, coach.name());
        assertNotNull(coach.phoneNumber());
        assertEquals(expectedPhoneNumber, coach.phoneNumber());
    }

    @Test
    public void testCoachBuilderWithPhoneNumberObjectAndAutoGeneratedId() {
        CoachBuilder coachBuilder = new CoachBuilder();
        String expectedName = "John Doe";
        PhoneNumber expectedPhoneNumber = new PhoneNumber("1234567890");

        Coach coach = coachBuilder
                .withName(expectedName)
                .withPhoneNumber(expectedPhoneNumber)
                .build();

        assertNotNull(coach.id());
        assertEquals(expectedName, coach.name());
        assertNotNull(coach.phoneNumber());
        assertEquals(expectedPhoneNumber, coach.phoneNumber());
    }
}