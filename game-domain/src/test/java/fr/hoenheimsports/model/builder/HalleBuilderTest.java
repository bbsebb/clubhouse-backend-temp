package fr.hoenheimsports.model.builder;

import fr.hoenheimsports.model.Address;
import fr.hoenheimsports.model.GlueAuthorization;
import fr.hoenheimsports.model.Halle;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class HalleBuilderTest {
    @Test
    public void testHalleBuilder() {
        HalleBuilder halleBuilder = new HalleBuilder();
        UUID expectedId = UUID.randomUUID();
        String expectedName = "Halle A";
        String expectedStreet = "123 Rue Principale";
        int expectedPostalCode = 75000;
        String expectedCity = "Paris";
        GlueAuthorization expectedGlueAuthorization = GlueAuthorization.AUTHORIZED;

        Halle halle = halleBuilder
                .withId(expectedId)
                .withName(expectedName)
                .withAddress(addressBuilder -> addressBuilder
                        .withStreet(expectedStreet)
                        .withPostalCode(expectedPostalCode)
                        .withCity(expectedCity))
                .withGlueAuthorization(expectedGlueAuthorization)
                .build();

        assertEquals(expectedId, halle.id());
        assertEquals(expectedName, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedStreet, halle.address().street());
        assertEquals(expectedPostalCode, halle.address().postalCode());
        assertEquals(expectedCity, halle.address().city());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
    }

    @Test
    public void testHalleBuilderWithAutoGeneratedId() {
        HalleBuilder halleBuilder = new HalleBuilder();
        String expectedName = "Halle A";
        String expectedStreet = "123 Rue Principale";
        int expectedPostalCode = 75000;
        String expectedCity = "Paris";
        GlueAuthorization expectedGlueAuthorization = GlueAuthorization.AUTHORIZED;

        Halle halle = halleBuilder
                .withName(expectedName)
                .withAddress(addressBuilder -> addressBuilder
                        .withStreet(expectedStreet)
                        .withPostalCode(expectedPostalCode)
                        .withCity(expectedCity))
                .withGlueAuthorization(expectedGlueAuthorization)
                .build();

        assertNotNull(halle.id());
        assertEquals(expectedName, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedStreet, halle.address().street());
        assertEquals(expectedPostalCode, halle.address().postalCode());
        assertEquals(expectedCity, halle.address().city());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
    }

    @Test
    public void testHalleBuilderWithAddressObject() {
        HalleBuilder halleBuilder = new HalleBuilder();
        UUID expectedId = UUID.randomUUID();
        String expectedName = "Halle A";
        Address expectedAddress = new Address("123 Rue Principale", 75000, "Paris");
        GlueAuthorization expectedGlueAuthorization = GlueAuthorization.AUTHORIZED;

        Halle halle = halleBuilder
                .withId(expectedId)
                .withName(expectedName)
                .withAddress(expectedAddress)
                .withGlueAuthorization(expectedGlueAuthorization)
                .build();

        assertEquals(expectedId, halle.id());
        assertEquals(expectedName, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedAddress, halle.address());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
    }

    @Test
    public void testHalleBuilderWithAddressObjectAndAutoGeneratedId() {
        HalleBuilder halleBuilder = new HalleBuilder();
        String expectedName = "Halle A";
        Address expectedAddress = new Address("123 Rue Principale", 75000, "Paris");
        GlueAuthorization expectedGlueAuthorization = GlueAuthorization.AUTHORIZED;

        Halle halle = halleBuilder
                .withName(expectedName)
                .withAddress(expectedAddress)
                .withGlueAuthorization(expectedGlueAuthorization)
                .build();

        assertNotNull(halle.id());
        assertEquals(expectedName, halle.name());
        assertNotNull(halle.address());
        assertEquals(expectedAddress, halle.address());
        assertEquals(expectedGlueAuthorization, halle.glueAuthorization());
    }
}